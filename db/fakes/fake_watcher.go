// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context"
	"github.com/coreos/etcd/client"
)

type FakeWatcher struct {
	NextStub        func(context.Context) (*client.Response, error)
	nextMutex       sync.RWMutex
	nextArgsForCall []struct {
		arg1 context.Context
	}
	nextReturns struct {
		result1 *client.Response
		result2 error
	}
	nextReturnsOnCall map[int]struct {
		result1 *client.Response
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWatcher) Next(arg1 context.Context) (*client.Response, error) {
	fake.nextMutex.Lock()
	ret, specificReturn := fake.nextReturnsOnCall[len(fake.nextArgsForCall)]
	fake.nextArgsForCall = append(fake.nextArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("Next", []interface{}{arg1})
	fake.nextMutex.Unlock()
	if fake.NextStub != nil {
		return fake.NextStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.nextReturns.result1, fake.nextReturns.result2
}

func (fake *FakeWatcher) NextCallCount() int {
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	return len(fake.nextArgsForCall)
}

func (fake *FakeWatcher) NextArgsForCall(i int) context.Context {
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	return fake.nextArgsForCall[i].arg1
}

func (fake *FakeWatcher) NextReturns(result1 *client.Response, result2 error) {
	fake.NextStub = nil
	fake.nextReturns = struct {
		result1 *client.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeWatcher) NextReturnsOnCall(i int, result1 *client.Response, result2 error) {
	fake.NextStub = nil
	if fake.nextReturnsOnCall == nil {
		fake.nextReturnsOnCall = make(map[int]struct {
			result1 *client.Response
			result2 error
		})
	}
	fake.nextReturnsOnCall[i] = struct {
		result1 *client.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeWatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeWatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.Watcher = new(FakeWatcher)
